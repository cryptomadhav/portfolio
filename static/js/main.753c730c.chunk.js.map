{"version":3,"sources":["fonts/SpaceGrotesk-Regular.otf","components/Header/styles.js","components/Header/index.jsx","utils/miscUtils.js","components/SkillContainer.js","components/AboutSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderBg","styled","div","HeaderOverlay","x","y","NameBlock","Info","p","Connect","Social","SocialButton","SocialLinkWrapper","a","Header","useState","setX","setY","onMouseMove","event","window","innerWidth","clientX","clientY","style","fontWeight","href","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kD,izCCEpC,IAAMC,EAAWC,IAAOC,IAAV,KAURC,EAAgBF,IAAOC,IAAV,KAGT,gBAAEE,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,0BAAyBD,EAAzB,eAAiCC,EAAjC,UAKJC,EAAYL,IAAOC,IAAV,KAITK,EAAON,IAAOO,EAAV,KAMJC,EAAUR,IAAOC,IAAV,KAIPQ,EAAST,IAAOC,IAAV,KAMNS,EAAeV,IAAOC,IAAV,KAGZU,EAAoBX,IAAOY,EAAV,KCYfC,EAnDA,WAAO,IAAD,EACCC,mBAAS,GADV,mBACVX,EADU,KACPY,EADO,OAECD,mBAAS,GAFV,mBAEVV,EAFU,KAEPY,EAFO,KAUjB,OACI,kBAACjB,EAAD,CAAUkB,YARU,SAAAC,GCNxBC,OAAOC,YAAc,MDUjBL,GAAMG,EAAMG,QAAU,IACtBL,GAAME,EAAMI,QAAU,OAIlB,kBAACpB,EAAD,CAAeC,EAAGA,EAAGC,EAAGA,GACpB,kBAACC,EAAD,KACI,yBAAKkB,MAAO,CACRC,WAAY,QADhB,gBAKA,sDAIJ,kBAAClB,EAAD,+CAEI,6BAFJ,4CAOA,6BACI,kBAACE,EAAD,sBACA,kBAACC,EAAD,KACI,kBAACE,EAAD,CAAmBc,KAAK,oCAAoCC,OAAO,UAC/D,kBAAChB,EAAD,eAGJ,kBAACC,EAAD,CAAmBc,KAAK,iCAAiCC,OAAO,UAC5D,kBAAChB,EAAD,kBAGJ,kBAACC,EAAD,CAAmBc,KAAK,+BAA+BC,OAAO,UAC1D,kBAAChB,EAAD,qB,qWE1CbV,IAAOC,IAAV,KAOMD,IAAOC,IAAV,K,2QCPDD,IAAOC,IAAV,KAOQD,IAAOC,IAAV,K,MAPhB,ICee0B,EAdH,WAAO,IAAD,EACoBb,mBAAS,GAD7B,6BAKd,OACI,oCACI,kBAAC,EAAD,QCAQc,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.753c730c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceGrotesk-Regular.53134474.otf\";","import styled from 'styled-components'\r\n\r\nexport const HeaderBg = styled.div`\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    height: 100vh;\r\n    font-family: Space Grotesk;\r\n    line-height: 1.5;\r\n    text-align: left;\r\n    color: white;\r\n`\r\nexport const HeaderOverlay = styled.div`\r\n    padding: 100px;\r\n    padding-top: 80px;\r\n    transform: ${({x, y}) => `translate(${x}px, ${y}px)`};\r\n    @media only screen and (max-width: 600px) {\r\n        padding: 40px;\r\n    }\r\n`\r\nexport const NameBlock = styled.div`\r\n    color: white;\r\n    font-size: 1.2rem;\r\n`\r\nexport const Info = styled.p`\r\n    margin-top: 150px;\r\n    margin-bottom: 100px;\r\n    color: white;\r\n    font-size: 1.7rem;\r\n`\r\nexport const Connect = styled.div`\r\n    font-size: 1.4rem;\r\n    font-weight: 700;\r\n`\r\nexport const Social = styled.div`\r\n    width: 200px;\r\n    font-size: 1rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\nexport const SocialButton = styled.div`\r\n    font-size: 1.2rem;\r\n`\r\nexport const SocialLinkWrapper = styled.a`\r\n    color: inherit;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { isMobile } from '../../utils/miscUtils'\r\nimport { HeaderBg, HeaderOverlay, NameBlock, Info, Connect, Social, SocialLinkWrapper, SocialButton } from './styles'\r\n\r\nconst Header = () => {\r\n    const [x, setX] = useState(0)\r\n    const [y, setY] = useState(0)\r\n    const handleMouseMove = event => {\r\n        if (isMobile()) {\r\n            return;\r\n        }\r\n        setX(-event.clientX / 60);\r\n        setY(-event.clientY / 30);\r\n    }\r\n    return (\r\n        <HeaderBg onMouseMove={handleMouseMove}>\r\n            <HeaderOverlay x={x} y={y}>\r\n                <NameBlock>\r\n                    <div style={{\r\n                        fontWeight: '700',\r\n                    }}>\r\n                        Madhav Mehta\r\n                    </div>\r\n                    <div>\r\n                        Full Stack Developer\r\n                    </div>\r\n                </NameBlock>\r\n                <Info>\r\n                    I'm a software engineer based in India,\r\n                    <br />\r\n                    currently working full-time with Amazon.\r\n                    {/* <br/>\r\n                    Stick around till the end for a short game. */}\r\n                </Info>\r\n                <div>\r\n                    <Connect>Let's Connect</Connect>\r\n                    <Social>\r\n                        <SocialLinkWrapper href=\"mailto: madhav.mehta896@gmail.com\" target=\"_blank\">\r\n                            <SocialButton>Email</SocialButton>\r\n                        </SocialLinkWrapper>\r\n\r\n                        <SocialLinkWrapper href=\"https://bit.ly/madhav-linkedin\" target=\"_blank\">\r\n                            <SocialButton>Linkedin</SocialButton>\r\n                        </SocialLinkWrapper>\r\n\r\n                        <SocialLinkWrapper href=\"https://bit.ly/madhav-github\" target=\"_blank\">\r\n                            <SocialButton>Github</SocialButton>\r\n                        </SocialLinkWrapper>\r\n                    </Social>\r\n                </div>\r\n            </HeaderOverlay>\r\n        </HeaderBg>\r\n    )\r\n}\r\n\r\nexport default Header;","export const isMobile = () => (\r\n    window.innerWidth <= 800\r\n)","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Skills = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    margin: 10%;\r\n    border: 2px solid black;\r\n    justify-content: space-around;\r\n`\r\nconst SkillsBox = styled.div`\r\n    border: 2px solid black;\r\n    width: 45%;\r\n    height: 200px;\r\n    margin: 50px;\r\n`\r\n\r\nexport default () => {\r\n    return (\r\n        <Skills>\r\n            <SkillsBox>\r\n                Experience Box\r\n            </SkillsBox>\r\n            <SkillsBox>\r\n                Skills Box\r\n            </SkillsBox>\r\n        </Skills>\r\n    )\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SkillContainer from \"./SkillContainer\";\r\n\r\nconst About = styled.div`\r\n    margin: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: aquamarine;\r\n`\r\n\r\nconst AboutTitle = styled.div`\r\n    color: white;\r\n    font-size: 30px;\r\n`\r\n\r\nexport default () => {\r\n    return (\r\n        <About>\r\n            <AboutTitle>About</AboutTitle>\r\n            <SkillContainer />\r\n        </About>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport HeaderSection from \"./components/Header\";\r\nimport AboutSection from \"./components/AboutSection\";\r\nimport Game from \"./components/Game\";\r\n\r\nconst App = () => {\r\n    const [activeTab, setActiveTab] = useState(1)\r\n    const handleTabSwitch = (key) => {\r\n        setActiveTab(key)\r\n    }\r\n    return (\r\n        <>\r\n            <HeaderSection/>\r\n            {/* <Game/>\r\n            <AboutSection/> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './fonts/SpaceGrotesk-Regular.otf'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}